// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bill.sql

package sqlc

import (
	"context"
	"time"
)

const createBill = `-- name: CreateBill :one
INSERT INTO bill (name,credit,credit_date )
VALUES ($1, $2, $3) 
RETURNING id, name, credit, credit_date, created_at, updated_at
`

type CreateBillParams struct {
	Name       string
	Credit     int32
	CreditDate time.Time
}

func (q *Queries) CreateBill(ctx context.Context, arg CreateBillParams) (Bill, error) {
	row := q.db.QueryRow(ctx, createBill, arg.Name, arg.Credit, arg.CreditDate)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Credit,
		&i.CreditDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBillByDate = `-- name: GetBillByDate :many
SELECT id,name,credit,credit_date
FROM bill
WHERE credit_date = $1
`

type GetBillByDateRow struct {
	ID         int32
	Name       string
	Credit     int32
	CreditDate time.Time
}

func (q *Queries) GetBillByDate(ctx context.Context, creditDate time.Time) ([]GetBillByDateRow, error) {
	rows, err := q.db.Query(ctx, getBillByDate, creditDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBillByDateRow
	for rows.Next() {
		var i GetBillByDateRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Credit,
			&i.CreditDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
