// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: company.sql

package sqlc

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (name, credit_limit)
VALUES ($1, $2) 
RETURNING id, name, credit_limit, created_at, updated_at
`

type CreateCompanyParams struct {
	Name        string
	CreditLimit int32
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.Name, arg.CreditLimit)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreditLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT id, name, credit_limit
FROM company
WHERE name = $1
`

type GetCompanyByNameRow struct {
	ID          int32
	Name        string
	CreditLimit int32
}

func (q *Queries) GetCompanyByName(ctx context.Context, name string) (GetCompanyByNameRow, error) {
	row := q.db.QueryRow(ctx, getCompanyByName, name)
	var i GetCompanyByNameRow
	err := row.Scan(&i.ID, &i.Name, &i.CreditLimit)
	return i, err
}

const getName = `-- name: GetName :many
SELECT name
FROM company
`

func (q *Queries) GetName(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
