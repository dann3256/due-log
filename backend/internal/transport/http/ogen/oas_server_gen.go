// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateBill implements CreateBill operation.
	//
	// Create a bill.
	//
	// POST /bill
	CreateBill(ctx context.Context, req *CreateBillReq) (CreateBillRes, error)
	// CreateCompany implements CreateCompany operation.
	//
	// Create a new company record.
	//
	// POST /company
	CreateCompany(ctx context.Context, req *CreateCompanyReq) (CreateCompanyRes, error)
	// GetBills implements GetBills operation.
	//
	// Get Bill.
	//
	// GET /bills
	GetBills(ctx context.Context, params GetBillsParams) (GetBillsRes, error)
	// GetCompanyName implements GetCompanyName operation.
	//
	// Get company-name.
	//
	// GET /company
	GetCompanyName(ctx context.Context) (GetCompanyNameRes, error)
	// Login implements login operation.
	//
	// Authenticate user and return JWT token.
	//
	// POST /login
	Login(ctx context.Context, req *LoginReq) (LoginRes, error)
	// RegisterUser implements RegisterUser operation.
	//
	// Create a new user account.
	//
	// POST /register
	RegisterUser(ctx context.Context, req *RegisterUserReq) (RegisterUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
